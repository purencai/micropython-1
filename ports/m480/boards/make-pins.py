#!/usr/bin/env python
"""Generates the pins file for the M480"""
from __future__ import print_function

import re
import sys
import argparse
from collections import OrderedDict

class Pin:
    """Holds the information associated with a pin."""
    def __init__(self, name, port, pbit, IRQn):
        self.name = name
        self.port = port
        self.pbit = pbit
        self.afs  = []
        self.IRQn = IRQn

    def print(self):
    	print('const pin_af_t pin_%s_af[] = {' %self.name)
    	for af in self.afs:
    		print('    AF(%-20s, %-36s, %s, %s),' %af)
    	print('};\n')
        print('pin_obj_t pin_{:4s} = PIN({:4s}, {:2s}, {:2s}, &{:4s}, pin_{:s}_af, {:s});\n'.format(self.name, self.name, self.port, self.pbit, self.name, self.name, self.IRQn))

    def print_header(self, hdr_file):
        hdr_file.write('extern const pin_af_t pin_{:s}_af[];\n'.format(self.name))
        hdr_file.write('extern pin_obj_t pin_{:4s};\n'.format(self.name))


class Pins:
    def __init__(self):
        self.pins = OrderedDict()   # list of Pin

    def parse_af_file(self, filename):
        with open(filename, 'r') as f:
            for line in f.readlines():
                match = re.match(r'#define (SYS_GP([A-H])_MFP([LH])_P\2(\d{1,2})MFP_(\w+))\s+\(0x[0-9A-F]{2}UL<<(\w+)', line)
                if match:
                    name = 'P' + match.group(2) + match.group(4)

                    if name not in self.pins:
                        self.pins[name] = Pin(name, 'P'+match.group(2), 'BIT'+match.group(4), 'GP%s_IRQn' %match.group(2))

                    self.pins[name].afs.append(('%s_%s' %(name, match.group(5)), match.group(1), '(0xFu << %-24s)' %match.group(6), 
                                            '&SYS->GP%s_MFP%s' %(match.group(2), match.group(3))))

    def print(self):
        for name, pin in self.pins.items():
            pin.print()
        print('')
        print('STATIC const mp_rom_map_elem_t pins_locals_dict_table[] = {')
        for name, pin in self.pins.items():
            print('    {{ MP_ROM_QSTR(MP_QSTR_{:5s}),  MP_ROM_PTR(&pin_{:5s}) }},'.format(pin.name, pin.name))
        print('};')
        print('')
        print('MP_DEFINE_CONST_DICT(pins_locals_dict, pins_locals_dict_table);')
        

    def print_header(self, hdr_filename):
        with open(hdr_filename, 'wt') as hdr_file:
            for name, pin in self.pins.items():
                pin.print_header(hdr_file)

    def print_qstr(self, qstr_filename):
        with open(qstr_filename, 'wt') as qstr_file:
            for name, pin in self.pins.items():
                print('Q({})'.format(pin.name), file=qstr_file)

                for af in pin.afs:
                	print('Q({})'.format(af[0]), file=qstr_file)

    def print_af_const(self, af_const_filename):
        with open(af_const_filename, 'wt') as af_const_file:
            for name, pin in self.pins.items():
                for af in pin.afs:
                    print('    { MP_ROM_QSTR(MP_QSTR_%-20s),  MP_ROM_INT(%-36s)},' %(af[0], af[1]), file=af_const_file)


def main():
    parser = argparse.ArgumentParser(
        prog="make-pins.py",
        usage="%(prog)s [options] [command]",
        description="Generate board specific pin file"
    )
    parser.add_argument(
        "-a", "--af",
        dest="af_filename",
        help="Specifies the alternate function file for the chip",
        default="../chip/sys.h"
    )
    parser.add_argument(
        "-p", "--prefix",
        dest="prefix_filename",
        help="Specifies beginning portion of generated pins file",
        default="M480_prefix.c"
    )
    parser.add_argument(
        "-q", "--qstr",
        dest="qstr_filename",
        help="Specifies name of generated qstr header file",
        default="../build-M482Lite/pins_qstr.h"
    )
    parser.add_argument(
        "-r", "--hdr",
        dest="hdr_filename",
        help="Specifies name of generated pin header file",
        default="../build-M482Lite/pins.h"
    )
    parser.add_argument(
        "--af-const",
        dest="af_const_filename",
        help="Specifies header file for alternate function constants.",
        default="../build-M482Lite/pins_af_const.h"
    )
    args = parser.parse_args(sys.argv[1:])

    pins = Pins()

    print('// This file was automatically generated by make-pins.py')
    print('//')

    if args.af_filename:
        print('// --af {:s}'.format(args.af_filename))
        pins.parse_af_file(args.af_filename)

    if args.prefix_filename:
        print('// --prefix {:s}'.format(args.prefix_filename))
        print('')
        with open(args.prefix_filename, 'r') as prefix_file:
            print(prefix_file.read())

    pins.print()
    pins.print_qstr(args.qstr_filename)
    pins.print_header(args.hdr_filename)
    pins.print_af_const(args.af_const_filename)


if __name__ == "__main__":
    main()
